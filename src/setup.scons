import distutils.sysconfig, os,sys



# Setting libraryDirs and libraries ===========================================
ld_libpath = os.getenv('LD_LIBRARY_PATH')

# '/opt/intel/vtune_amplifier/lib64/'
libraryDirs = ['./build']
src_for     = ['./src_for']
src_py      = ['./src_py']
includeDirs = [src_for[0]+'/includes/','/opt/intel/vtune_amplifier/include/intel64/']
libraries = []
InstallLoc = './pymod'

# Builder fortran
#==============================================================================
def which(pgm):
    path=os.getenv('PATH')
    for p in path.split(os.path.pathsep):
        p=os.path.join(p,pgm)
        if os.path.exists(p) and os.access(p,os.X_OK):
            return p

cc  = 'gcc'
cxx = 'g++'
AR  = 'ar'

#-qopt-report-file=optimisation
ifortPath = which('ifort')
if ifortPath: 
  f90compiler = 'ifort'
  ccompiler   = 'icc'
  f90Args   = '-O3 -fPIC -fno-alias -fno-fnalias -ip -unroll0  -xHost -g -fp-model precise -fp-model source  -fp-model consistent -qoverride-limits '
  f90Args   = f90Args + ' -qopt-report5 -qopt-report-phase=loop,vec,cg,openmp  -qopt-report-embed '
  freeFormFlag='-free'
else:
  f90compiler = 'frt'
  ccompiler   = 'fcc'
  f90Args0  = '-fPIC -Free'
  f90Args   = f90Args0+' '+'-Kfast'
  #f90Args   = f90Args0+' '+'-Kfast -O3 -KA64FX -KSVE -KARMV8_3_A -Kzfill=100 -Kprefetch_sequential=soft -Kprefetch_line=8 -Kprefetch_line_L2=16 -Knounroll'
  freeFormFlag='-ffree-form'

F2PYFLAGS  = '\'' + f90Args 

#~~~~ preprocessing 
prepFlags = ''
# prep      = 'cpp -P -traditional %s -I'+includeDirs[0]%prepFlags+' $SOURCES $TARGETS'
prep      = 'cpp -P -traditional -I'+includeDirs[0]+' -I'+includeDirs[0]+'gen/'+' -I'+includeDirs[1]+prepFlags+' $SOURCES $TARGETS'
prepro    = Builder(action=prep, suffix='.f90', src_suffix='.for')


#====================== Set Env + Compilers details =========================

def getenv(name):
     #if os.environ.has_key(name): return os.environ[name]
     if name in os.environ: return os.environ[name]
     else: return ''

def getEnvForScons():
    return {'PATH': getenv('PATH') }
            #'LD_LIBRARY_PATH': getenv('LD_LIBRARY_PATH'),
            #'LM_LICENSE_FILE': getenv('LM_LICENSE_FILE'),
            #'INTEL_LICENSE_FILE': getenv('INTEL_LICENSE_FILE')}

env = Environment(tools=None, CC=cc, CXX=cxx, AR=AR, CCFLAGS=[], CXXFLAGS=[],
                  BUILDERS={'CPPRFOR': prepro}, 
                  BINDIR = "./pymod",
                  FORTRAN=f90compiler,
                  LIBPATH=libraryDirs,
                  LIBS=libraries,
                  ENV=getEnvForScons(),
                  ARCOMSTR="Creating a static library  : $TARGET",
                  RANLIBCOMSTR="Indexing the static library: $TARGET",
                  SHLINKCOMSTR="Linking: $TARGET",
                  SHCCCOMSTR="Compiling the C file      : $SOURCE ---> $TARGET",
                  SHFORTRANCOMSTR="Compiling the Fortran file: $SOURCE     ---> $TARGET",
                  FORTRANCOMSTR="Calling the preprocessor; $TARGET",
                  FORTRANPPCOMSTR="Calling the preprocessor; $TARGET",
                  SHFORTRANPPCOMSTR="Calling the preprocessor; $TARGET",
                  F90COMSTR="Calling the preprocessor; $TARGET",
                  SHF90COMSTR="Calling the preprocessor; $TARGET",
                  SHF90PPCOMSTR="Calling the preprocessor; $TARGET",
                  F90PPCOMSTR="Calling the preprocessor; $TARGET")




if f90compiler == 'ifort':
   env.Replace(FORTRANFLAGS= f90Args )
else:
   env.Replace(FORTRANFLAGS= f90Args)

env.Replace(FORTRANSUFFIXES=['.f', '.F', '.f90', '.F90'])
fortran_builder = Builder(action='$FORTRANCOM',
                          suffix='.o', src_suffix='.f90')

env.Append(BUILDERS={'Fortran' : fortran_builder},)


#==================== Build Static Library RHS ==============================

fortran_lib = []

import glob

srcdata =           glob.glob("./src_for/includes/gen/bcsrc*.for")
srcdata = srcdata + glob.glob("./src_for/includes/gen/PhyBC*.for")
# srcdata = []
srcdata.append(src_for[0]+'/'+'rhs.for')

print(srcdata)

olib1   = []

for src_lib1 in srcdata:
  cpplib1  = env.CPPRFOR(target=src_lib1)
  olib1.append(env.Fortran(target=cpplib1))

lib1 = env.StaticLibrary('rhs', olib1)
# lib1 = env.StaticLibrary('rhs', srcdata)
l1   = env.Install(lib1)
fortran_lib.append('rhs')
if ifortPath:
  fortran_lib.append('iomp5 ')
else:
  fortran_lib.append('gomp ')
# fortran_lib.append('ittnotify')

#==================== Build Python module  ====================================

src         = src_for[0]+'/'+'dnamiF.for'
cppsrc      = env.CPPRFOR(target=src)

# Clone the initial env. and compile/build dNami as a shared library
senv = env.Clone(FORTRANFLAGS=freeFormFlag+' -cpp '+f90Args,
                 FORTRANPATH=['#'+includeDirs[0], '#'+includeDirs[0]+'gen'],
                 #LINK=f90compiler,
                 CC=ccompiler,
                 CCFLAGS='-O3',
                 LINK=ccompiler,
                 #LINKFLAGS=['-O3','-fPIC','-shared','-Wl,-soname,libtest.so'],
                 LINKFLAGS=['-O3'],
                 LIBS=['m','rhs'],
                 BUILD_ROOT=Dir('#').abspath)

sl = senv.SharedLibrary(target='libdnami',source=["./src_for/dnami_clayer.c","./src_for/dnamiF.for"])
si = senv.Install(os.path.join('$BUILD_ROOT',InstallLoc),sl)
Depends(si,lib1)





